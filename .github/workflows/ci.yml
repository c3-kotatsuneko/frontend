name: CI

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write
  contents: write
  pull-requests: write
  actions: write
  checks: write

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: install modules
        uses: ./.github/actions/cache-module

  build:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: build
        uses: ./.github/actions/cache-build

  report-diff:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get PR Diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff --numstat origin/${{ github.base_ref }} > diff.txt
          TOTAL_LINES=$(awk '{ added += $1; removed += $2 } END { print added+removed }' diff.txt)
          echo "total-lines=$TOTAL_LINES" >> $GITHUB_OUTPUT

      - name: Create Diff Comment
        uses: actions/github-script@v3
        id: diff-comment
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const totalLines = ${{ steps.diff.outputs.total-lines }};
            const warning = `> [!WARNING]\n> The code changes are nearly 400 lines. Reviewers, please review carefully.\n> Reviewees, try to keep changes under 300 lines.`;
            const caution =`> [!CAUTION]\n> The code changes exceed 400 lines. This amount of changes may increase the risk of bugs.\n> Reviewees might find it easier to review if the pull request is split.`;
            const body = `**Total Lines Changed:** ${totalLines}
            ${totalLines > 400 ? caution : totalLines > 300 ? warning:""}
            `
            core.setOutput("body", body)
      - name: Comment to Pull Request
        uses: ./.github/actions/pull-request-comment
        with:
          includes-comment: "<!-- __DIFF -->"
          comment-body: ${{steps.diff-comment.outputs.body}}

  lint:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Cached Dependencies
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Lint
        run: npm run ci:lint
        shell: bash

  report-useless-modules:
    needs: install-dependencies
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Cached Dependencies
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Analyze modules
        id: useless-modules
        run: |
          echo "result=$(npx depcheck . --skip-missing --json)" >> $GITHUB_OUTPUT
      - name: Create Useless Modules Comment
        id: useless-modules-comment
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const json = ${{steps.useless-modules.outputs.result}};
            const isUselessModuleEmpty = json.dependencies.length === 0;
            const uselessModulesComment = isUselessModuleEmpty ? 'useless modules not foundâœ¨' : `> [!CAUTION]\n> The following modules are not used in the code. Please remove them.\n> ${json.dependencies.map((module) => `- ${module}`).join('\n> ')}`;
            core.setOutput("body", uselessModulesComment)
      - name: report useless modules
        uses: ./.github/actions/pull-request-comment
        with:
          includes-comment: "<!-- __USELESS_MODULES -->"
          comment-body: ${{steps.useless-modules-comment.outputs.body}}
  deploy:
    needs: install-dependencies
    runs-on: ubuntu-latest
    outputs:
      urls: ${{ steps.hosting_deploy.outputs.urls }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Cached Dependencies
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
      - name: Build
        run: npm run build
        shell: bash
      - uses: FirebaseExtended/action-hosting-deploy@v0.9.0
        id: hosting_deploy
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: "${{ github.event.number }}"
          projectId: kotatsu-neko-431405
      - name: Set output
        run: echo "urls=${{steps.hosting_deploy.outputs.details_url}}" >> $GITHUB_OUTPUT

  lighthouse:
    if: github.event_name == 'pull_request'
    needs: deploy
    runs-on: ubuntu-latest
    env:
      URLS: ${{ needs.deploy.outputs.urls }}
    steps:
      - uses: actions/checkout@v2
      - name: Use Cached Dependencies
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}

      - name: Run Lighthouse
        id: lighthouse
        uses: treosh/lighthouse-ci-action@v10
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          urls: |
            ${{ fromJson(env.URLS)[0] }}
      - name: Create Lighthouse Comment
        id: light-house-comment
        uses: actions/github-script@v5
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const results = ${{steps.lighthouse.outputs.manifest}}
            const links = ${{steps.lighthouse.outputs.links}}
            const mark = (value) => {
            if (value >= 0.9) {
                return 'ðŸŸ¢';
            } else if (value >= 0.5) {
                return 'ðŸŸ¡';
            } else {
                return 'ðŸ”´';
            }
            };
            const body = `
            # Lighthouse Report
            | URL | Performance | Accessibility | Best Practices | SEO | PWA | Details |
            | --- | ----------- | ------------- | -------------- | --- | --- | ------- |
            ${results.map((result) => `| ${result.url} | ${mark(result.summary.performance)}${Math.trunc(result.summary.performance * 100)} | ${mark(result.summary.accessibility)}${Math.trunc(result.summary.accessibility * 100)} | ${mark(result.summary['best-practices'])}${Math.trunc(result.summary['best-practices'] * 100)} | ${mark(result.summary.seo)}${Math.trunc(result.summary.seo * 100)} | ${mark(result.summary.pwa)}${Math.trunc(result.summary.pwa * 100)} | :pencil: [result](${links[result.url]}) |`).join('\n')}
            `;

            core.setOutput("body", body)
      - name: Comment to Pull Request
        uses: ./.github/actions/pull-request-comment
        with:
          includes-comment: "<!-- __LIGHTHOUSE -->"
          comment-body: ${{steps.light-house-comment.outputs.body}}
